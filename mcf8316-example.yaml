# MCF8316 BLDC MOTOR DRIVER EXAMPLE
#
# Please modify this configuration to suit your needs.
esphome:
  name: mcf8316-example
  friendly_name: MCF8316 Example

esp32:
  board: lolin_s2_mini  # Change this for the board you are using
  framework:
    type: esp-idf

logger:

# Set up a WiFi access point and web server for this example.
# After connecting to the access point, open http://192.168.4.1/ in a web browser
# to access the user interface.
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  ap:
    ssid: "mcf8316-example"
    password: "JustForTesting"
    ap_timeout: 1s
  power_save_mode: light
web_server:
  local: true
  log: true
  ota: false
  version: 3

# Import the MCF8316 component.
external_components:
  # Import the component from Github.
  # - source: github://j9brown/esphome-mcf8316@main
  #   components: [ mcf8316 ]
  # Import the component from a local directory.
  - source: components

# Configure the I2C bus.
i2c:
  - scl: 9
    sda: 8
    scan: false # The MCF8316 will not be detected in a scan although it is harmless
    #frequency: 100kHz

# Configure the BLDC motor driver.
mcf8316:
  - id: motor_driver
    wake: 2
    nfault: 3

output:
  - id: speed
    platform: ledc
    pin:
      number: 4
      mode: output
      inverted: false
    #channel: 5
    #frequency: ${minuet_fan_motor_pwm_frequency_default} Hz
    frequency: 20000 Hz

# Controls
button:
  - platform: template
    name: "Read config"
    on_press:
      then:
        - lambda: |-
            auto driver = id(motor_driver);
            driver->read_config();
  - platform: template
    name: "Configure"
    on_press:
      then:
        - lambda: |-
            auto driver = id(motor_driver);
            auto config = driver->make_default_config();
            //config.set(esphome::mcf8316::IPD_CURR_THR, esphome::mcf8316::IPDCurrThr::CURR_0_5_A);
            //config.set(esphome::mcf8316::SPEED_MODE, esphome::mcf8316::SpeedMode::REGISTER);
            //config.set(esphome::mcf8316::BRAKE_INPUT, esphome::mcf8316::BrakeInput::OFF);
            //config.set(esphome::mcf8316::BUS_VOLT, esphome::mcf8316::BusVolt::MAXIMUM_30_V);
            config.set(esphome::mcf8316::FG_DIV, uint8_t(2));
            config.set(esphome::mcf8316::MAX_SPEED, uint16_t(4000));
            driver->write_config(config);
  - platform: template
    name: "Start MPET"
    on_press:
      then:
        - lambda: |-
            auto driver = id(motor_driver);
            driver->start_mpet(false);
  - platform: template
    name: "Start motor"
    on_press:
      then:
        - lambda: |-
            auto driver = id(motor_driver);
            driver->write_target_motor_speed_in_rotor_hz(10);
  - platform: template
    name: "Stop motor"
    on_press:
      then:
        - lambda: |-
            auto driver = id(motor_driver);
            driver->write_target_motor_speed_in_rotor_hz(0);
  - platform: template
    name: "Clear fault"
    on_press:
      then:
        - lambda: |-
            auto driver = id(motor_driver);
            driver->clear_fault();
